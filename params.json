{"name":"StreamingCC","tagline":"A C++ library for summarizing data streams","body":"StreamingCC\r\n----------------------\r\nA (pure) C++ library for summarizing data streams.\r\n\r\n## Algorithms\r\n`StreamingCC` implements various [streaming algorithms](https://en.wikipedia.org/wiki/Streaming_algorithm) and [probabilistic data structures](https://en.wikipedia.org/wiki/Category:Probabilistic_data_structures). They can be used to effectively summarize the data stream even when data is too large to fit into memory.\r\n\r\nAlgorithms/Data Structures included in `StreamingCC`:\r\n+ [Count-Min Sketch](https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch)\r\n+ [Count-Sketch](https://www.cs.rutgers.edu/~farach/pubs/FrequentStream.pdf)\r\n+ [AMS Sketch](https://polylogblog.wordpress.com/2009/09/27/bite-sized-stream-ams-sketching/)\r\n+ [Distinct Elements Counter](http://www.cs.dartmouth.edu/~ac/Teach/CS49-Fall11/Notes/lecnotes.pdf)(section 3)\r\n+ [Reservoir sampling](https://en.wikipedia.org/wiki/Reservoir_sampling)\r\n+ [Streaming Submodular Maximization](http://las.ethz.ch/files/badanidiyuru14streaming.pdf)\r\n+ [Bloom Filter](https://en.wikipedia.org/wiki/Bloom_filter) and its variants\r\n+ ...\r\n\r\n\r\n## APIs\r\nSee [API docs](http://xmerge.me/StreamingCC-api) for details.\r\n\r\n\r\n\r\n## Dependencies\r\n+ CMake (>= 2.8.9)\r\n+ C++11 support\r\n\r\n## How to Compile\r\nThe source code compiles to static library. \r\n### Step One\r\nOpen a terminal, and\r\n\r\n    $ git clone git@github.com:jiecchen/StreamingCC.git\r\n\r\n### Step Two\r\nEnter `StreamingCC/build`, and run\r\n\r\n    $ cmake ..\r\n\r\nWhich generates a `Makefile` in current directory.\r\n\r\n### Step Three\r\nNow you can make the library via\r\n\r\n    $ make\r\n\r\nIf you want to install it as system-wide library, run the following\r\n\r\n    $ sudo make install\r\n\r\nWhich will copy `libstreamcc.a` to `/usr/lib`  and all headers to `/usr/local/include/streamcc/`. You need to use **-lstreamcc** flag to link to the static library.\r\n\r\n## A Example\r\nAssume you have run `sudo make install`, and you have a file `test.cpp` with following content,\r\n\r\n``` c++\r\n\r\n#include <streamcc/Sampling.hpp>\r\n#include <iostream>\r\n\r\nint main() {\r\n\t// create an object which will maintain\r\n\t// 10 samples (with replacement) dynamically\r\n\tReservoirSampling<int> rsmp(10);\r\n\t// sample from a data stream with length 1,000,000\r\n\tfor (int i = 0; i < 1000000; i++)\r\n\t\trsmp.processItem(i);\r\n\r\n\t// print the samples\r\n\tfor (auto sample: rsmp.getSamples())\r\n\t\tstd::cout << sample << \" \";\r\n\tstd::cout << std::endl;\r\n\treturn 0;\r\n}\r\n```\r\n\r\nNow compile with\r\n\r\n    $ g++ -std=c++11 -O3 -o test test.cpp -lstreamcc\r\n\r\nand run\r\n\r\n    $ ./test\r\n\t843605 343835 655954 727411 781901 856163 385544 417329 374657 925313\r\n\r\nIt samples ( with replacements) 10 items from a data stream with length one million. The memory it uses linearly depends on number of samples.\r\n\r\n\r\n## License\r\nMIT License\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}